from abc import ABCMeta, abstractmethod

from ..utils import (calculate_number_antennas, calculate_psnr_fits, calculate_psnr_ms)


class Imager(metaclass=ABCMeta):

    def __init__(
        self,
        inputvis: str = "",
        output: str = "",
        cell: str = "",
        robust: float = 2.0,
        weighting: str = "briggs",
        field: str = "",
        spw: str = "",
        stokes: str = "I",
        phase_center: str = "",
        data_column: str = "corrected",
        M: int = 512,
        N: int = 512,
        niter: int = 100,
        noise_pixels: int = None,
        save_model: bool = True,
        verbose: bool = True
    ):
        """
        General Imager object

        Parameters
        ----------
        inputvis :
            Absolute path to the input Measurement Set file
        output :
            Absolute path to the output
        cell :
            Cellsize - example: cell=[’0.5arcsec,’0.5arcsec’] or
            cell=[’1arcmin’, ’1arcmin’] cell = ’1arcsec’ is equivalent to [’1arcsec’,’1arcsec’]
        robust :
            Robustness parameter for Briggs weighting.
            robust = -2.0 maps to uniform weighting. robust = +2.0 maps to natural weighting.
        weighting :
            Weighting scheme (natural,uniform,briggs,superuniform,radial). During gridding of the dirty
            or residual image, each visibility value is multiplied by a weight before it is accumulated on the uv-grid.
            The PSF’s uv-grid is generated by gridding only the weights (weightgrid).
        field :
            Select field
        spw :
            Select spectral window/channels
        stokes :
            Stokes planes to reconstruct
        phase_center :
            Phase center of the image
        data_column :
            Data column to use for image synthesis
        M :
            Horizontal image size
        N :
            Vertical image size
        niter :
            Number of iterations
        noise_pixels :
            Pixels where to calculate the noise on the residual image. Default is None, and it means to
            calculate the RMS on the whole image
        save_model :
            Whether to save the model column or not
        verbose :
            Whether to use verbose option for imagers
        """
        self.inputvis = inputvis
        self.output = output
        self.cell = cell
        self.robust = robust
        self.weighting = weighting
        self.field = field
        self.spw = spw
        self.stokes = stokes
        self.phase_center = phase_center
        self.data_column = data_column
        self.M = M
        self.N = N
        self.niter = niter
        self.noise_pixels = noise_pixels
        self.save_model = save_model
        self.verbose = verbose
        self.psnr = 0.0
        self.peak = 0.0
        self.stdv = 0.0
        self.name = ""

        if self.inputvis is not None and self.inputvis != "":
            self.nantennas = calculate_number_antennas(self.inputvis)
        # self.__dict__.update(kwargs)

    def _calculate_statistics_fits(
        self, signal_fits_name="", residual_fits_name="", stdv_pixels=None
    ) -> None:
        """
        Calculates the peak signal-to-noise ratio, peak and rms for a FITS image.

        Parameters
        ----------
        signal_fits_name :
            Absolute path to the restored FITS image
        residual_fits_name :
            Absolute path to the residual FITS image
        stdv_pixels :
            Pixels where to calculate the RMS
        """
        if stdv_pixels is None:
            psnr, peak, stdv = calculate_psnr_fits(
                signal_fits_name, residual_fits_name, self.noise_pixels
            )
        else:
            psnr, peak, stdv = calculate_psnr_fits(
                signal_fits_name, residual_fits_name, stdv_pixels
            )

        self.psnr = peak / stdv
        self.peak = peak
        self.stdv = stdv

    def _calculate_statistics_msimage(
        self, signal_ms_name="", residual_ms_name="", stdv_pixels=None
    ) -> None:
        """
        Calculates the peak signal-to-noise ratio, peak and rms for a CASA image.

        Parameters
        ----------
        signal_ms_name :
            Absolute path to the restored CASA image
        residual_ms_name :
            Absolute path to the residual CASA image
        stdv_pixels :
            Pixels where to calculate the RMS
        """
        if stdv_pixels is None:
            psnr, peak, stdv = calculate_psnr_ms(
                signal_ms_name, residual_ms_name, self.noise_pixels
            )

        self.psnr = peak / stdv
        self.peak = peak
        self.stdv = stdv

    @abstractmethod
    def run(self, imagename=""):
        return
